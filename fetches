import tensorflow as tf
import pymongo
from bson import ObjectId

# MongoDB connection string
connection_string = 'mongodb+srv://xxx:xxx@shared-demo.xhytd.mongodb.net/?retryWrites=true&w=majority'

# Connect to MongoDB
client = pymongo.MongoClient(connection_string)

# Access the movies collection
db = client.sample_mflix
movies_collection = db.movies

# Fetch a movie document
movie = movies_collection.find_one()

# Print the movie title
print("Movie Title:", movie['title'])

# TensorFlow operation - Simple Add
a = tf.constant(5)
b = tf.constant(10)
c = tf.add(a, b)

# Print the TensorFlow result
print("Simple TensorFlow Add Result:", c.numpy())

# TensorFlow - Define a simple model (e.g., linear regression)
model = tf.keras.Sequential([
    tf.keras.layers.Dense(units=1, input_shape=[1])
])

# Compile the model
model.compile(optimizer='sgd', loss='mean_squared_error')

# Dummy data for the TensorFlow model
xs = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0])
ys = tf.constant([1.5, 3.0, 4.5, 6.0, 7.5])

# Train the model
model.fit(xs, ys, epochs=10)

# Make a prediction using the trained model
prediction = model.predict([6.0])
print("Prediction for input 6.0:", prediction)

# Fetch more documents from MongoDB to feed into the model
movies = movies_collection.find({"year": {"$gt": 1990}}, {"title": 1, "imdb.rating": 1}).limit(10)

# Example of using a TensorFlow operation on data from MongoDB
for movie in movies:
    imdb_rating = movie.get('imdb', {}).get('rating', 0)
    if imdb_rating:
        # TensorFlow operation: Multiply rating by 2
        rating_tensor = tf.constant(imdb_rating)
        doubled_rating = tf.multiply(rating_tensor, 2)
        print(f"Movie: {movie['title']} - Original Rating: {imdb_rating}, Doubled Rating: {doubled_rating.numpy()}")
